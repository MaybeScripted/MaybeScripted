name: README build
on:
  schedule:
    - cron: "*/5 * * * *"  # Run every 5 minutes to check for new activity
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Repository that triggered this update'
        required: false
        default: 'manual'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-activity:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Get Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: python -m pip install requests

      - name: Check for recent activity
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          python -c "
          import requests
          import json
          import os
          from datetime import datetime, timedelta
          
          # Get the last run timestamp from a file
          last_run_file = 'last_run.txt'
          try:
              with open(last_run_file, 'r') as f:
                  last_run = f.read().strip()
          except FileNotFoundError:
              last_run = (datetime.now() - timedelta(hours=1)).isoformat()
          
          # Convert to datetime for comparison
          last_run_dt = datetime.fromisoformat(last_run)
          
          # Get user's recent activity
          headers = {'Authorization': f'token {os.environ[\"ACCESS_TOKEN\"]}'}
          url = f'https://api.github.com/users/{os.environ[\"USER_NAME\"]}/events'
          
          response = requests.get(url, headers=headers)
          events = response.json()
          
          # Filter for push events in the last 5 minutes, excluding MaybeScripted/MaybeScripted
          recent_activity = []
          for event in events:
              if event['type'] == 'PushEvent':
                  repo_name = event['repo']['name']
                  full_repo = f\"{event['actor']['login']}/{repo_name}\"
                  
                  # Skip MaybeScripted/MaybeScripted
                  if full_repo == 'MaybeScripted/MaybeScripted':
                      continue
                      
                  event_time = datetime.fromisoformat(event['created_at'].replace('Z', '+00:00'))
                  
                  # Only include events from the last 5 minutes
                  if event_time > last_run_dt:
                      recent_activity.append({
                          'repo': full_repo,
                          'branch': event['payload']['ref'].replace('refs/heads/', ''),
                          'commits': len(event['payload']['commits']),
                          'time': event['created_at']
                      })
          
          # If there's recent activity, trigger the update
          if recent_activity:
              print('Recent activity detected:')
              for activity in recent_activity:
                  print(f\"  - {activity['repo']} ({activity['commits']} commits)\")
              
              # Write current timestamp for next run
              with open(last_run_file, 'w') as f:
                  f.write(datetime.now().isoformat())
              
              # Exit with code 0 to trigger the next job
              exit(0)
          else:
              print('No recent activity detected')
              exit(1)
          "

  build:
    needs: check-activity
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Get Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/cache/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: python -m pip install -r cache/requirements.txt

      - name: Update README file
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          echo "Updating README based on recent activity"
          python today.py

      - name: Check for changes
        id: changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected, skipping commit"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected, proceeding with commit"
          fi

      - name: Commit and push
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "github-actions-bot@maybescripted.github.io"
          git config --global user.name "MaybeScripted/GitHub-Actions-Bot"
          git commit -m "Updated README - detected activity across repositories"
          git push
